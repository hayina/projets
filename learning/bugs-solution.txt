["Voulez vous vraiment supprimer le projet ", <strong>{projet.intitule}</strong>, " ?"]
- always check toLowerCase() f les 2 sens
- when updating the state tjrs faire attention de mettre { ...state } et non pas un à un { prop1: .., prop2:.., ...} 
cauz on risque d'oublier some property

--------------
Warning: A component is changing a controlled input of type text to be uncontrolled. Input elements should not switch from controlled to uncontrolled (or vice versa). 
Decide between using a controlled or uncontrolled input element for the lifetime of the component
---> input value fih chi string khawi wla undefined ymkn

--------------

- const { meta = {} } = action; // if meta is missing e.q undefined alors il sera initialisé a {}

- tjours check if we tap DISPATCH and not only the actions (function)
dispatch(setSuggestios(...)) and not just setSuggestios(...)
it's a common error

-- the spread operator is useful also in
func(...args) -> func(args[0], arg[1], ...)
<Componnent {...props}> -> <Compoenent prop1=.. prop2=... />

-- obj[2+4] = 'foo' ----> { 6: 'foo' } useful when we want to deal with a object better than an array

---

const gotError = ({ touched, error, dirty }) => {
    if( (dirty || touched) && error ) return true;
    return false;
}
=>
const gotError = ({ touched, error, dirty }) => {
    return ( (dirty || touched) && error );
}

------

dispatch will not be available directly as a prop if we use map dispatch to state ???

--------

can't .... undefinedalways check function if params are okey


------------
            //// UPDATE ITEM IN ARRAY
                // WORONG !! STATE MUTATION
            // let arr = state[arrName];
            // arr[index] = item;
            // let newState = { ...state, [arrName]: [...arr] }

            // GOOD !! STATE MUTATION
            let arr = [ ...state[arrName] ];
            arr[index] = item;
            return { ...state, [arrName]: arr }

////////

bouble with setState() !!! attention stale state use instead useReducer hook

faire attention value select is string not number

useLayoutEffect ??

equivalent enums => const ERRORS = Object.freeze({ LOAD_PROJECT: 1, LOAD_MARCHE: 2 })

///

2 function successives dans render :=>
    renderResultsList()
    renderPagingLoader()
    =>
    <>
        {renderResultsList()}
        {renderPagingLoader()}
    </>   

/// 
complicated state => useReducer not useState !!
sinn faut faire tres attention à l'ordre des setX() et les loading ...
la page peut completement changer en un clein d'oeil sans s'apercevoir
=>
alors useReducer to update state just once !!!!!!!!!!!!


///
faire tres attention quand on utilise state dans une foncition success du ajax call for example
it will hold the stale state not the updated state before ajax call (setState({ loading: true, page: ...}))


///
always consider using "userRef" our friend

// attention always f axios because we have promise and always is excecuted 